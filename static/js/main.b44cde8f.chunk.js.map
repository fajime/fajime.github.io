{"version":3,"sources":["models/models.ts","context/GlobalContext.tsx","context/appReducer.ts","context/ContextProvider.tsx","components/Heading.tsx","components/CharactersList.tsx","components/DetailCharacter.tsx","App.tsx","index.tsx"],"names":["Actions","GlobalContext","createContext","INITIAL_STATE","characters","selected","undefined","setSelected","id","randomSentence","loading","appReducer","state","action","type","LIST_Characters","payload","SELECT_Character","find","character","char_id","ContextProvider","children","useReducer","dispatch","useState","setLoading","setSentence","t","useTranslation","baseUrl","process","useEffect","axios","get","then","response","data","catch","error","toast","tost","className","onClick","dismiss","icon","color","selectRandomSentence","author","sentence","Math","floor","random","length","quote","Provider","value","authorSelected","authorName","name","split","join","position","reverseOrder","toastOptions","duration","style","minWidth","Heading","i18n","language","selectedLang","defaultValue","onChange","event","changeLanguage","target","CharactersList","useContext","map","to","src","img","title","alt","portrayed","DetailCharacter","nickname","status","birthday","occupation","ocupation","index","App","path","element","i18next","use","initReactI18next","init","interpolation","escapeValue","lng","resources","es","global","global_es","en","global_en","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b44cde8f.chunk.js","sourcesContent":["export interface Character {\r\n    char_id: number;\r\n    name: string;\r\n    portrayed: string;\r\n    img: string;\r\n    nickname: string;\r\n    status: string;\r\n    birthday: string;\r\n    occupation: string[];\r\n}\r\n\r\nexport interface ContextProps {\r\n    characters: Character[];\r\n    selected: Character | undefined;\r\n    setSelected(id: number): void;\r\n    randomSentence: string | undefined;\r\n    loading: boolean;\r\n}\r\n\r\nexport interface props {\r\n    children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport enum Actions {\r\n    LIST_Characters = 'LIST_Characters',\r\n    SELECT_Character = 'SELECT_Character',\r\n  }\r\n\r\nexport type AppActions = \r\n| { type: Actions.LIST_Characters, payload: { characters: Character[] } }\r\n| { type: Actions.SELECT_Character, payload: { id: number } };\r\n\r\nexport const INITIAL_STATE = {\r\n    characters: [],\r\n    selected: undefined,\r\n    setSelected: (id: number) => {},\r\n    randomSentence: '',\r\n    loading: true\r\n}\r\n\r\n\r\n","import { createContext } from 'react';\r\nimport { ContextProps } from './../models/models';\r\n\r\nexport const GlobalContext = createContext<ContextProps>({} as ContextProps);","import { ContextProps, Character, AppActions, Actions } from '../models/models';\r\n\r\nexport const appReducer = (state: ContextProps, action: AppActions): ContextProps => {\r\n    switch (action.type) {\r\n        case Actions.LIST_Characters:\r\n            return {\r\n                ...state, \r\n                characters: [...state.characters, ...action.payload.characters]\r\n            };\r\n        case Actions.SELECT_Character:\r\n            return {\r\n                ...state, \r\n                selected: state.characters.find( (character: Character) => character.char_id === action.payload.id )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { useState, useReducer, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport axios from 'axios';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { VscError } from 'react-icons/vsc';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport { appReducer } from './appReducer';\r\nimport { props, Actions, INITIAL_STATE } from './../models/models';\r\n\r\nexport const ContextProvider = ({ children }: props ) => {\r\n    const [ state, dispatch ] = useReducer(appReducer, INITIAL_STATE);\r\n    const { characters, selected } = state;\r\n    const [ loading, setLoading ] = useState<boolean>(true);\r\n    const [ randomSentence, setSentence ] = useState<string>('');\r\n    const { t } = useTranslation('global');\r\n\r\n    const baseUrl: string = process.env.REACT_APP_API_URL || '';\r\n    \r\n    useEffect( () => {\r\n        axios.get(`${baseUrl}/characters?limit=16`)\r\n        .then((response) => {\r\n            dispatch({ type: Actions.LIST_Characters, payload: { characters: response.data }});\r\n            setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n            if (error) {\r\n                setLoading(false);\r\n                toast(\r\n                    (tost) => (\r\n                        <span> {t('request_error')} \r\n                            <button className=\"ml-5 text-red-800\" onClick={() => toast.dismiss(tost.id)}>\r\n                                {t('close')}\r\n                            </button>\r\n                        </span>\r\n                    ),\r\n                    { icon: <VscError color=\"red\" />, }\r\n                );\r\n            }\r\n        });  \r\n    }, [baseUrl]);\r\n\r\n    const setSelected = (id: number): void => {\r\n        dispatch({ type: Actions.SELECT_Character, payload: { id } });\r\n\r\n        const authorSelected = state.characters.find( (character) => character.char_id === id );\r\n        let authorName = authorSelected?.name.split(' ');\r\n        const author = authorName?.join('+');\r\n        selectRandomSentence(author);\r\n    }\r\n\r\n    const selectRandomSentence = (author: string | undefined ): void => {\r\n        axios.get(`${baseUrl}/quote?author=${author}`)\r\n        .then((response) => {\r\n            const sentence = response.data[Math.floor(Math.random() * response.data.length)];\r\n            setSentence(sentence.quote);\r\n        })\r\n        .catch((error) => {\r\n            if (error) {\r\n                setLoading(false);\r\n                setSentence('');\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n                characters: characters, \r\n                selected: selected, \r\n                setSelected,\r\n                randomSentence,\r\n                loading \r\n            }}>\r\n            { children }\r\n            <Toaster \r\n                position=\"top-center\"\r\n                reverseOrder={ true }\r\n                toastOptions={{\r\n                    duration: 3000,\r\n                    style: {\r\n                      minWidth: '400px',\r\n                    },\r\n                  }}\r\n            />\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const Heading = () => {\r\n    const { t, i18n } = useTranslation('global');\r\n\r\n    const [selectedLang] = useState<string>(i18n.language);\r\n\r\n    const handleLanguage = (event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        i18n.changeLanguage(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"item-center text-gray-900 font-bold mb-10\">\r\n            <select data-test=\"language\" defaultValue={ selectedLang } onChange={handleLanguage} >\r\n                <option data-text=\"es\" value=\"es\">{ t('spanish') }</option>\r\n                <option data-text=\"en\" value=\"en\">{ t('english') }</option>\r\n            </select>\r\n            </div>\r\n            <div data-test=\"title-page\" className=\"item-center text-gray-100 font-bold mb-10 text-3xl\">\r\n                Breaking Bad {t('characters')}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ImSpinner11 } from 'react-icons/im';\r\nimport 'animate.css';\r\n\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport { Character } from './../models/models';\r\n\r\nexport const CharactersList = () => {\r\n    const { characters, setSelected, loading } = useContext(GlobalContext);\r\n\r\n    const { t } = useTranslation('global');\r\n\r\n    const handleSelected = (id: number ) => {\r\n        setSelected(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { !loading && (\r\n                <div className=\"flex flex-wrap justify-center\">\r\n                    { characters.map( (character: Character) => \r\n                        (\r\n                            <Link \r\n                                to=\"detail\" \r\n                                onClick={() => handleSelected( character.char_id )} \r\n                                key={character.char_id}\r\n                                data-test={character.char_id}\r\n                                className=\"bg-gray-900 px-5 w-1/5 py-5 text-white shadow-2x1 m-4 animate__animated animate__fadeInUp\"> \r\n                                    <div className=\"bg-gray-900 mb-5\">\r\n                                        <img src={character.img} title={character.name} alt={character.name} className=\"object-contain h-48 w-96\" />\r\n                                    </div>\r\n                                    <p className=\"font-bold mb-2\">{character.name}</p>\r\n                                    <p>{character.portrayed}</p>\r\n                            </Link>\r\n                        ) \r\n                    )}\r\n                </div>\r\n            )}\r\n            { loading && ( \r\n                <button type=\"button\" className=\"inline-flex items-center px-4 py-2 font-semibold rounded-md text-white bg-green-500\">\r\n                    <ImSpinner11 className='mr-3'/>\r\n                    {t('loading')}\r\n                </button>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link } from 'react-router-dom';\r\nimport 'animate.css';\r\n\r\nimport { GlobalContext } from './../context/GlobalContext';\r\n\r\nexport const DetailCharacter = () => {\r\n\r\n    const { selected, randomSentence } = useContext(GlobalContext);\r\n    const { t } = useTranslation('global');\r\n\r\n    return (\r\n        <>\r\n            { selected && (\r\n                <>\r\n                    <Link className=\"animate__animated animate__fadeInDown\" to=\"/\">\r\n                        <button className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center mb-5\">\r\n                            <span>{t('back')}</span>\r\n                        </button>\r\n                    </Link>\r\n                    { randomSentence !== '' && <div className='italic font-bold mb-2 text-white-500 animate__animated animate__bounceInDown animate__delay-1s'>{ randomSentence }</div>}\r\n                    { randomSentence === '' && <div className='italic font-bold mb-2 text-red-500 animate__animated animate__bounceInDown animate__delay-1s'>{t('sentences_empty')}</div>}  \r\n                    <div className=\"flex flex-wrap justify-center animate__animated animate__zoomInDown\">\r\n                        <div className=\"bg-gray-900 p-10\">\r\n                            <div className=\"mb-5\">\r\n                                <img src={selected.img} title={selected.name} alt={selected.name} className=\"object-fit h-48 w-86\"/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bg-gray-900 pt-10 pr-10\">\r\n                            <p className=\"font-bold mb-2\" data-test=\"name\">\r\n                                <span className=\"font-normal mb-2\">{t('name')}: </span>\r\n                                {selected.name}\r\n                            </p>\r\n                            <p className=\"font-bold mb-2\">\r\n                                <span className=\"font-normal mb-2\">{t('portrayed')}: </span>\r\n                                {selected.portrayed}\r\n                            </p>\r\n                            <p className=\"font-bold mb-2\">\r\n                                <span className=\"font-normal mb-2\">{t('nickname')}: </span>\r\n                                {selected.nickname}\r\n                            </p>\r\n                            <p className=\"font-bold mb-2\">\r\n                                <span className=\"font-normal mb-2\">{t('status')}: </span>\r\n                                {selected.status}\r\n                            </p>\r\n                            <p className=\"font-bold mb-2\">\r\n                                <span className=\"font-normal mb-2\">{t('birthday')}: </span>\r\n                                {selected.birthday}\r\n                            </p>\r\n                            <p className=\"font-bold mb-8\">\r\n                                <span className=\"font-normal mb-2\">{t('occupation')}: </span>\r\n                                {selected.occupation.map( (ocupation, index) => (<li className=\"list-none\" key={index}>{ ocupation }</li>))}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n            { !selected && (\r\n                <>\r\n                    <p className=\"font-bold mb-2 text-red-800\">{t('select_of_list')}</p>\r\n                    <Link className=\"animate__animated animate__fadeInDown\" to=\"/\">\r\n                        <button className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center mb-5\">\r\n                            <span>{t('back')}</span>\r\n                        </button>\r\n                    </Link>\r\n                </>\r\n            )\r\n\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import {\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport { ContextProvider } from './context/ContextProvider';\r\nimport { Heading, CharactersList, DetailCharacter } from './components';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <div className=\"h-screen text-white text-center p-10\">\r\n        <div className=\"container mx-auto h-full\">\r\n          <ContextProvider>\r\n            <Heading />\r\n            <Routes>\r\n              <Route path=\"/\" element={<CharactersList />}/>\r\n              <Route path=\"/detail\" element={<DetailCharacter/>}/>\r\n            </Routes>\r\n          </ContextProvider>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport { I18nextProvider, initReactI18next } from 'react-i18next';\r\nimport i18next from 'i18next';\r\nimport global_en from './assets/locales/en/global.json';\r\nimport global_es from './assets/locales/es/global.json';\r\n\r\nimport './tailwind.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\ni18next\r\n.use(initReactI18next)\r\n.init({\r\n  interpolation: { escapeValue: false },\r\n  lng: 'en',\r\n  resources: {\r\n    es: { global: global_es },\r\n    en: { global: global_en }\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <I18nextProvider i18n={i18next}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </I18nextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}